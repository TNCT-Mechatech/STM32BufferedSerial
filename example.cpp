/**
 * @file example.cpp
 * @brief Example usage of STM32BufferedSerial class.
 *
 * This example demonstrates non-blocking UART echo using interrupts.
 * It uses the HAL UART interrupt callbacks to manage RX/TX buffering.
 */

#include "STM32BufferedSerial.hpp"
#include "main.h"

// UART handle generated by CubeMX (e.g., huart2)
extern UART_HandleTypeDef huart2;

// Instantiate a buffered serial object (256-byte buffers)
STM32BufferedSerial serial(&huart2, 256);

/**
 * @brief Initialize peripherals and serial communication.
 */
void setup() {
    HAL_Init();
    SystemClock_Config();
    MX_GPIO_Init();
    MX_USART2_UART_Init();

    serial.begin();

    // Register instance for interrupt callbacks
    STM32BufferedSerial::registerInstance(&huart2, &serial);

    // Send startup message
    const char* msg = "STM32 Buffered Serial Example\r\n";
    serial.write(reinterpret_cast<const uint8_t*>(msg), strlen(msg));
}

/**
 * @brief Main loop: echo received characters.
 */
void loop() {
    if (serial.available()) {
        int c = serial.read();
        if (c >= 0) {
            serial.write((uint8_t)c);  // Echo back
        }
    }
}

/**
 * @brief HAL RX complete callback (called by HAL when a byte is received)
 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef* huart) {
    if (auto inst = STM32BufferedSerial::fromHandle(huart))
        inst->handleRxComplete();
}

/**
 * @brief HAL TX complete callback (called by HAL when a byte is transmitted)
 */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef* huart) {
    if (auto inst = STM32BufferedSerial::fromHandle(huart))
        inst->handleTxComplete();
}

/**
 * @brief Main entry point.
 */
int main(void) {
    setup();

    while (1) {
        loop();
    }
}
